7.2
上午：CLR的作用，用 CLR_FLAG 使CLR之后，程序不会继续动作。
下午：类比CLK，用T3的下降沿，反映第一次QD，使CLR恢复
晚：编程

问题：  
    第一个QD发生了什么？
    第一个指令如何取出？
    人机交互加 STOP？

7.3
上午：
    1.第一个QD后，相当于开始工作，在单拍情况下，程序会产生第一个节拍点位的操作信号，但是并不操作，显示灯会亮，该
    电位会一直持续，直到下一拍QD。每一次均是如此，电位一直持续，操作信号保持有效，等待一拍QD，执行这些操作，然后
    控制信号也随之更新为下一次要进行的操作。
    2.CLR中其实包含了STOP的功能，CLR之后，不再产生T1，T2，T3,
    3.使用CLR_FLAG，全局信号。CLR之后，CLR_FLAG=1，控制器不会再输出信号，当有第一个
    QD后，CLR_FLAG=0，可以正常工作。
    4.ST0也是全局敏感信号，且是process的敏感信号之一。
    5.编程

老师解答： 
    //详情见后       （1.process中if和if之间并发）
    2.process和process之间并发
    //详情见后       （3.在if的一个判断条件所执行的语句是并发的）
       if
               ------
              |A<=1  |
              |B<=2  |-------并行执行
              |      |
               ------
       end if;

    4.嵌套的if之间有优先级关系，因此顺序执行
    5.一个信号有两处输出：
           -------
    ------|       |
    ------|       |--------A--------
           -------                  |
                                    |
                                    |--------线与的 A--
           -------                  |
    ------|       |                 |
    ------|       |--------A--------  
           -------          
    
    当两个逻辑并不完全互斥时，两个A都会输出，会做线与，导致芯片过热。
    有点逻辑需要线与，例如运算器。
    但是控制器尽量避免线与，完善逻辑

下午：
待解决问题：
       1.要求PC的跳转不用指令实现，即不用NOP指令，在SWCBA后面紧跟一个SHORT的W1实现。有LPC和SBUS和STOP。
       这样是不是要建立两个process，SWCBA的process和IR的process？？？
       2.CLR_FLAG的初始化问题，会不会产生线与？？？
       3.SST0和ST0
       ST0的初始化问题，会不会产生线与？？？
       ST0改变后是否会立刻使其他指令的输出发生改变？？？
       4.开两个process？？？
       一个控制时序，一个控制组合逻辑。

晚：
解决的问题：
       1.process中有变量，看做顺序执行；无变量，看做并行。（不严谨的叙述）
       2.信号赋值
              （1）、对同一个信号的赋值，只有最后一个有效
              （2）、process中信号的赋值有延迟，在process挂起时才赋值
              （3）、时钟沿对信号赋值，和普通信号赋值，不同！
       3.变量直接赋值
       4.程序开始运行后，会将各个进程都设置为挂起状态，直到process中的敏感信号发生变化，才可能执行process
       中的内容。因此设计时我们可以认为用户需要先按CLR，不用考虑CLR_FLAG的初始化。


明日计划：
       process（CLR, ST0, T3, SWC, SWB, SWA, W1, W2, W3)
              ...
       END PROCESS;
       
       process（IR_FLAG, IR, W1, W2, W3)
       IF IR_FLAG='1' THEN
              CASE IR IS
                     ...
              END CASE;
       END IF;
       END PROCESS;

       CLR----->IR_FLAG='0'
       SWCBA="000"----->IR_FLAG='1'

7.4
上午：
       实验报告要求：
              思想、理念、原则

编程：
       1.添加了两个process，引入IR_FLAG，将IR译码部分改到第二个process中，用IR_FLAG控制其执行。
       2.原process中，在SW="000"处，添加了一段PC跳转的程序，控制程序可以在运行之初自由的开始于内
       存的任何地方。在一拍QD之后，将IR_FLAG置1，程序进入正常执行状态。
       注：IR_FLAG要将SW="000"中的其他程序锁住。其他SW要将IR_FLAG置0，也锁住第二个process。
       3.关于ST0的问题，ST0在一个点位末跳变为1时，在process最终挂起后赋值时，会使一些信号有突变，
       但是其他时序信号总会到来，使信号正确，之后才会由T3将信号执行。
编译：
       ERROR 10818: Can`t infer register because it does`t hold its value outside the clock edge.
       ERROR 10822: Couldn`t implement registers for assignments on this clock edge.
       ERROR 10028: Can`t resolve multiple constant drives for net ... 
       ERROR 10029

可能出错的地方：
       同一个process中，多个在下降沿处赋值的判别语句
       信号在时钟沿赋值和普通赋值混用？？？
       多个process同时对信号赋值？？？

下午：
编程修改：
       1.把第二个process中的初始化部分放入IF中

可能出错的地方：
       1.两个process对同一个信号赋值，可能逻辑上是对的，但是信号赋值会出错
       2.一个信号由时钟边缘触发，这是由D触发器实现的，一个信号只能对应一个D触发器，一个D触发器只能由一个时钟边缘
       触发。
       3.测试
       process(T3)
       begin
        if T3'event and T3 = '0' then
            LDC <= '1';
        end if;

        if T3'event and T3 = '0' then
            LDZ <= '1';
        end if;
       end process;
       是正确的，神奇。
       4.关于process的标准格式：

       if <asynchronous condition> then
              --
       elsif <synchronous condition> then -- e.g. rising_edge(clk)
              --
       end if;

       The synchronous action must be mutual exclusive to all asynchronous actions manipulating a signal.

计划：
       改成一个process，重新设计
       
       if CLR then
	       ---
       else
	       if T3'event and T3='0' then
			---
	       end if;

              初始化；

              JUDGE SW；
	       ---
       end if;

晚：
       1.编程成功，结构如上
       去掉了IR_FLAG和CLR_FLAG
       2.修改流程图

明日计划：
       烧芯片！！！

7.5
上午：

遇到的问题：
       ERROR
       1.JIAG ID code specified in JEDEC STAPL Format File does not match any valid JIAG ID codes for device
       2.Operation failed

解决办法：
       更换新芯片

验证了老师给的测试样例，通过观察，发现了一些小问题，又增加了一条指令，最终可以正确执行。

计划：
       1.再验证一下书上的一条程序
       2.编写一个新程序
       3.思考流水

下午：
待修改：
       1.写寄存器写完之后，要回到一开始，从头开始，flag还能变回去，（如果用户不按CLR）
       2.CASE改成IF，因为CASE占用资源较多。
       3.再次思考
       IF
              ...
       ELSIF
              ...
       END IF

       顺序？？？并行？？？

       IF之间是顺序？？？

验证：
       1.老师给的程序可以正常执行，但是不能移动，需要再编一个程序来测验。

理解：
       1.关于W和T
       单拍时，W先有效，控制信号是根据W判断的，于是对应的信号也有效，在QD之后，T到来，各部件执行相应操作。
                          ___________________________________________________                        
       W      ___________|                                                   |___________
                                                              ___   ___   ___
       T      _______________________________________________| T1|_| T2|_| T3|___________
       2.IR和INS的区别
       INS是双端口存储器从指令存储器部分到IR的BUS，一般INS上存的一般是下一条指令。

晚：
       修改程序。
       理解流水。
       1.两级流水，由于数据通路的独特性，可以实现，一边执行指令，一边取指令，从而实现并行的执行两条指令（一条的执行，和下一条的取指）
       2.由于缺乏存储指令的寄存器，认为可能难以实现更多级的流水

7.7
下午：
       1.确定流水CPU的编程
       （1）、不设置nop指令，在控制台SWCBA=000时，ST0=0时，W1负责LPC，W2负责LIR，随之程序进入正式执行。
       （2）、仍使用指令译码的形式
       2.修正指令流程图

晚上：
       1.书写实验报告
       2.编写一个新的测试程序

待测验问题：
       1.STOP是否要加SHORT

实验报告要求：
       1.数据通路图
       2.硬布线控制器逻辑模块图
       3.硬布线控制器指令周期流程图
       4.控制模块HDL语言源程序、原理图（说明+注释）
       5.模拟向量测试方程、测试波形图、testbench
       6.设计说明书：设计步骤、实验过程、结论
       7.设计与调试小结：设计中的问题、调试中的问题、解决办法
       8.思想、理念、原则
       9.拓展功能

       已解决：1、3、2、6、7（基本完成）、9、8
       未解决：5

7.8
上午：
任务：
       1.测试新的实验程序（普通版）
       成功
       2.测试流水
       3.STOP是否要加SHORT
       加
       4.实验报告2和7和6

下午：
       与上午任务相同

晚上任务：
       完成实验报告第4项
       研究仿真

       JMP指令会发生吞指，PC是0001H时，IR存的内容也变成了0001H中的内容，跳过了0000H，暂定的解决办法是将JMP指令延长为3周期，第二个周期LIR和LONG
       第三周期PCINC
       这样出现的新问题是，虽然不会吞指，但是W3灯亮，PCINC灯不亮，导致无法+1

       普通版：付
       普通版无初始化：竹
       中断：王、付
       流水：李·

李志成修改过的地方：
111
183？？

竹待改：
239
109
473
489
496
507

7.9
上午：
完成：
       1.流水程序编程
       （1）用nop指令
       （2）将JMP指令拆分为三个周期
       2.实验报告
       整合，还差仿真的截图

下午的任务：
       1.测试流水

       （1）
              if T3'event and T3='0' then
                -- 在需要第2个2节拍时，会将SST0设置为1，故在此，若信号SST0，将ST0设置为1
                IF SST0='1' THEN
                    ST0<='1';
                ELSE
                    IF W2 = '1' THEN
                        ST0 <= '0';
                    ELSE
                        ST0 <= '1';
                    END IF;
                END IF;      
              end if;

              可能有问题，暂时删掉了里面的else
       (2)
              SST0 <= (NOT ST0) AND W1;
              改为
              SST0 <= W1;

       (3)
              解决吞指的办法：在程序中被吞指的地方加入nop指令，虽然被跳过，但是无关紧要。
              依靠修改JMP的周期，并不靠谱。

晚：
       1.实验报告
       2.完善程序